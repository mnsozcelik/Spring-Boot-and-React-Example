{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\ozcelik\\\\Desktop\\\\workspace\\\\frontend\\\\src\\\\shared\\\\ApiProgress.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Component } from \"react\";\nimport axios from \"axios\";\nimport { cleanup } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useApiProgress = apiPath => {\n  _s();\n\n  const [pendingApiCall, setPendingApiCall] = useState(false);\n  useEffect(() => {\n    let requestInterceptor, responseInterceptor;\n\n    const updateApiCallFor = (url, inProgress) => {\n      if (url === apiPath) {\n        setPendingApiCall(inProgress);\n      }\n    };\n\n    const unregisterInterceptors = () => {\n      axios.interceptors.request.eject(requestInterceptor);\n      axios.interceptors.response.eject(responseInterceptor);\n    };\n\n    const registerInterceptors = () => {\n      requestInterceptor = axios.interceptors.request.use(request => {\n        updateApiCallFor(request.url, true);\n        return request;\n      });\n      responseInterceptor = axios.interceptors.response.use(response => {\n        updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    };\n\n    registerInterceptors();\n    return function unmount() {\n      unregisterInterceptors();\n    };\n  });\n  return endingApiCall;\n};\n\n_s(useApiProgress, \"dxeikoFXtsTGpF/7CQdkmajlavs=\");\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.registerInterceptors = () => {\n        this.requestInterceptor = axios.interceptors.request.use(request => {\n          this.updateApiCallFor(request.url, true);\n          return request;\n        });\n        this.responseInterceptor = axios.interceptors.response.use(response => {\n          this.updateApiCallFor(response.config.url, false);\n          return response;\n        }, error => {\n          this.updateApiCallFor(error.config.url, false);\n          throw error;\n        });\n      };\n\n      this.unregisterInterceptors = () => {\n        axios.interceptors.request.eject(this.requestInterceptor);\n        axios.interceptors.response.eject(this.responseInterceptor);\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === apiPath) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.registerInterceptors();\n    }\n\n    componentWillUnmount() {\n      this.unregisterInterceptors();\n    }\n\n    render() {\n      const pendingApiCall = this.state.pendingApiCall || this.props.pendingApiCall;\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...this.props,\n        pendingApiCall: pendingApiCall\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this);\n    }\n\n  }, _class.displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`, _temp;\n}","map":{"version":3,"sources":["D:/Users/ozcelik/Desktop/workspace/frontend/src/shared/ApiProgress.js"],"names":["React","useState","Component","axios","cleanup","useApiProgress","apiPath","pendingApiCall","setPendingApiCall","useEffect","requestInterceptor","responseInterceptor","updateApiCallFor","url","inProgress","unregisterInterceptors","interceptors","request","eject","response","registerInterceptors","use","config","error","unmount","endingApiCall","getDisplayName","WrappedComponent","displayName","name","withApiProgress","state","setState","componentDidMount","componentWillUnmount","render","props"],"mappings":"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","sourcesContent":["import React, { useState, Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { cleanup } from \"@testing-library/react\";\r\n\r\nexport const useApiProgress = (apiPath) => {\r\n  const [pendingApiCall, setPendingApiCall] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    let requestInterceptor, responseInterceptor;\r\n\r\n    const updateApiCallFor = (url, inProgress) => {\r\n      if (url === apiPath) {\r\n        setPendingApiCall(inProgress);\r\n      }\r\n    };\r\n\r\n    const unregisterInterceptors = () => {\r\n      axios.interceptors.request.eject(requestInterceptor);\r\n      axios.interceptors.response.eject(responseInterceptor);\r\n    };\r\n\r\n    const registerInterceptors = () => {\r\n      requestInterceptor = axios.interceptors.request.use((request) => {\r\n        updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n      responseInterceptor = axios.interceptors.response.use(\r\n        (response) => {\r\n          updateApiCallFor(response.config.url, false);\r\n          return response;\r\n        },\r\n        (error) => {\r\n          updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    };\r\n\r\n    registerInterceptors();\r\n    return function unmount(){\r\n      unregisterInterceptors();\r\n    }\r\n\r\n  });\r\n\r\n  return endingApiCall;\r\n};\r\n\r\nfunction getDisplayName(WrappedComponent) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\r\n}\r\n\r\nexport function withApiProgress(WrappedComponent, apiPath) {\r\n  return class extends Component {\r\n    static displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`;\r\n\r\n    state = {\r\n      pendingApiCall: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.registerInterceptors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.unregisterInterceptors();\r\n    }\r\n\r\n    registerInterceptors = () => {\r\n      this.requestInterceptor = axios.interceptors.request.use((request) => {\r\n        this.updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n      this.responseInterceptor = axios.interceptors.response.use(\r\n        (response) => {\r\n          this.updateApiCallFor(response.config.url, false);\r\n          return response;\r\n        },\r\n        (error) => {\r\n          this.updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    };\r\n\r\n    unregisterInterceptors = () => {\r\n      axios.interceptors.request.eject(this.requestInterceptor);\r\n      axios.interceptors.response.eject(this.responseInterceptor);\r\n    };\r\n\r\n    updateApiCallFor = (url, inProgress) => {\r\n      if (url === apiPath) {\r\n        this.setState({ pendingApiCall: inProgress });\r\n      }\r\n    };\r\n\r\n    render() {\r\n      const pendingApiCall =\r\n        this.state.pendingApiCall || this.props.pendingApiCall;\r\n      return (\r\n        <WrappedComponent {...this.props} pendingApiCall={pendingApiCall} />\r\n      );\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}