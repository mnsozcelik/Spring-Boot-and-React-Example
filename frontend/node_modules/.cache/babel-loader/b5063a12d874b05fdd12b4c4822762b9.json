{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\ozcelik\\\\Desktop\\\\workspace\\\\frontend\\\\src\\\\shared\\\\ApiProgress.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useApiProgress = apiPath => {\n  _s();\n\n  const [pendingApiCall, setPendingApiCall] = useState(false);\n  useEffect(() => {\n    let requestInterceptor, responseInterceptor;\n\n    const updateApiCallFor = (url, inProgress) => {\n      if (url === apiPath) {\n        this.setState({\n          pendingApiCall: inProgress\n        });\n      }\n    };\n\n    const registerInterceptors = () => {\n      requestInterceptor = axios.interceptors.request.use(request => {\n        updateApiCallFor(request.url, true);\n        return request;\n      });\n      responseInterceptor = axios.interceptors.response.use(response => {\n        updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    };\n\n    registerInterceptors();\n  });\n  return endingApiCall;\n};\n\n_s(useApiProgress, \"dxeikoFXtsTGpF/7CQdkmajlavs=\");\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.registerInterceptors = () => {\n        this.requestInterceptor = axios.interceptors.request.use(request => {\n          this.updateApiCallFor(request.url, true);\n          return request;\n        });\n        this.responseInterceptor = axios.interceptors.response.use(response => {\n          this.updateApiCallFor(response.config.url, false);\n          return response;\n        }, error => {\n          this.updateApiCallFor(error.config.url, false);\n          throw error;\n        });\n      };\n\n      this.unregisterInterceptors = () => {\n        axios.interceptors.request.eject(this.requestInterceptor);\n        axios.interceptors.response.eject(this.responseInterceptor);\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === apiPath) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.registerInterceptors();\n    }\n\n    componentWillUnmount() {\n      this.unregisterInterceptors();\n    }\n\n    render() {\n      const pendingApiCall = this.state.pendingApiCall || this.props.pendingApiCall;\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...this.props,\n        pendingApiCall: pendingApiCall\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this);\n    }\n\n  }, _class.displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`, _temp;\n}","map":{"version":3,"sources":["D:/Users/ozcelik/Desktop/workspace/frontend/src/shared/ApiProgress.js"],"names":["React","Component","axios","useApiProgress","apiPath","pendingApiCall","setPendingApiCall","useState","useEffect","requestInterceptor","responseInterceptor","updateApiCallFor","url","inProgress","setState","registerInterceptors","interceptors","request","use","response","config","error","endingApiCall","getDisplayName","WrappedComponent","displayName","name","withApiProgress","state","unregisterInterceptors","eject","componentDidMount","componentWillUnmount","render","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport const useApiProgress = (apiPath) => {\r\n  const [pendingApiCall, setPendingApiCall] = useState(false);\r\n\r\n  useEffect(() => {\r\n\r\n    let requestInterceptor, responseInterceptor;\r\n\r\n    const updateApiCallFor = (url, inProgress) => {\r\n      if (url === apiPath) {\r\n        this.setState({ pendingApiCall: inProgress });\r\n      }\r\n    };\r\n\r\n    const registerInterceptors = () => {\r\n      requestInterceptor = axios.interceptors.request.use((request) => {\r\n        updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n      responseInterceptor = axios.interceptors.response.use(\r\n        (response) => {\r\n          updateApiCallFor(response.config.url, false);\r\n          return response;\r\n        },\r\n        (error) => {\r\n          updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    };\r\n\r\n    registerInterceptors();\r\n\r\n  });\r\n\r\n  return endingApiCall;\r\n};\r\n\r\nfunction getDisplayName(WrappedComponent) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\r\n}\r\n\r\nexport function withApiProgress(WrappedComponent, apiPath) {\r\n  return class extends Component {\r\n    static displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`;\r\n\r\n    state = {\r\n      pendingApiCall: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.registerInterceptors();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      this.unregisterInterceptors();\r\n    }\r\n\r\n    registerInterceptors = () => {\r\n      this.requestInterceptor = axios.interceptors.request.use((request) => {\r\n        this.updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n      this.responseInterceptor = axios.interceptors.response.use(\r\n        (response) => {\r\n          this.updateApiCallFor(response.config.url, false);\r\n          return response;\r\n        },\r\n        (error) => {\r\n          this.updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    };\r\n\r\n    unregisterInterceptors = () => {\r\n      axios.interceptors.request.eject(this.requestInterceptor);\r\n      axios.interceptors.response.eject(this.responseInterceptor);\r\n    };\r\n\r\n    updateApiCallFor = (url, inProgress) => {\r\n      if (url === apiPath) {\r\n        this.setState({ pendingApiCall: inProgress });\r\n      }\r\n    };\r\n\r\n    render() {\r\n      const pendingApiCall =\r\n        this.state.pendingApiCall || this.props.pendingApiCall;\r\n      return (\r\n        <WrappedComponent {...this.props} pendingApiCall={pendingApiCall} />\r\n      );\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}