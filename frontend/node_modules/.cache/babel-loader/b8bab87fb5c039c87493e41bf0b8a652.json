{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\ozcelik\\\\Desktop\\\\workspace\\\\frontend\\\\src\\\\shared\\\\ApiProgress.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction withApiProgress(WrappedComponent) {\n  var _temp;\n\n  return _temp = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === this.props.path) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n\n    componentDidMount() {\n      axios.interceptors.request.use(request => {\n        //   if (request.url === this.props.path) {\n        //     this.setState({ pendingApiCall: true });\n        //   }\n        this.updateApiCallFor(request.url, true);\n        return request;\n      });\n      axios.interceptors.response.use(response => {\n        // if (response.config.url === this.props.path) {\n        //   this.setState({ pendingApiCall: false });\n        // }\n        this.updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        // if (error.config.url === this.props.path) {\n        //   this.setState({ pendingApiCall: false });\n        // }\n        this.updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    }\n\n    render() {\n      const {\n        pendingApiCall\n      } = this.state; //   return (\n      //     <div>\n      //       {React.cloneElement(this.props.children, {\n      //         pendingApiCall,\n      //       })}\n      //     </div>\n      //   );\n\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, {\n        pendingApiCall: pendingApiCall\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }, this);\n    }\n\n  }, _temp;\n}","map":{"version":3,"sources":["D:/Users/ozcelik/Desktop/workspace/frontend/src/shared/ApiProgress.js"],"names":["React","Component","axios","withApiProgress","WrappedComponent","state","pendingApiCall","updateApiCallFor","url","inProgress","props","path","setState","componentDidMount","interceptors","request","use","response","config","error","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,eAAT,CAAyBC,gBAAzB,EAA2C;AAAA;;AACzC,iBAAO,cAAcH,SAAd,CAAwB;AAAA;AAAA;AAAA,WAC7BI,KAD6B,GACrB;AACNC,QAAAA,cAAc,EAAE;AADV,OADqB;;AAAA,WA+B7BC,gBA/B6B,GA+BV,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtC,YAAID,GAAG,KAAK,KAAKE,KAAL,CAAWC,IAAvB,EAA6B;AAC3B,eAAKC,QAAL,CAAc;AAAEN,YAAAA,cAAc,EAAEG;AAAlB,WAAd;AACD;AACF,OAnC4B;AAAA;;AAK7BI,IAAAA,iBAAiB,GAAG;AAClBX,MAAAA,KAAK,CAACY,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAa;AAC1C;AACA;AACA;AACA,aAAKR,gBAAL,CAAsBQ,OAAO,CAACP,GAA9B,EAAmC,IAAnC;AACA,eAAOO,OAAP;AACD,OAND;AAOAb,MAAAA,KAAK,CAACY,YAAN,CAAmBG,QAAnB,CAA4BD,GAA5B,CACGC,QAAD,IAAc;AACZ;AACA;AACA;AACA,aAAKV,gBAAL,CAAsBU,QAAQ,CAACC,MAAT,CAAgBV,GAAtC,EAA2C,KAA3C;AACA,eAAOS,QAAP;AACD,OAPH,EAQGE,KAAD,IAAW;AACT;AACA;AACA;AACA,aAAKZ,gBAAL,CAAsBY,KAAK,CAACD,MAAN,CAAaV,GAAnC,EAAwC,KAAxC;AACA,cAAMW,KAAN;AACD,OAdH;AAgBD;;AAQDC,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEd,QAAAA;AAAF,UAAqB,KAAKD,KAAhC,CADO,CAET;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,0BAAO,QAAC,gBAAD;AAAkB,QAAA,cAAc,EAAEC;AAAlC;AAAA;AAAA;AAAA;AAAA,cAAP;AAEH;;AAhD4B,GAA/B;AAkDD","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction withApiProgress(WrappedComponent) {\r\n  return class extends Component {\r\n    state = {\r\n      pendingApiCall: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n      axios.interceptors.request.use((request) => {\r\n        //   if (request.url === this.props.path) {\r\n        //     this.setState({ pendingApiCall: true });\r\n        //   }\r\n        this.updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n      axios.interceptors.response.use(\r\n        (response) => {\r\n          // if (response.config.url === this.props.path) {\r\n          //   this.setState({ pendingApiCall: false });\r\n          // }\r\n          this.updateApiCallFor(response.config.url, false);\r\n          return response;\r\n        },\r\n        (error) => {\r\n          // if (error.config.url === this.props.path) {\r\n          //   this.setState({ pendingApiCall: false });\r\n          // }\r\n          this.updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    }\r\n\r\n    updateApiCallFor = (url, inProgress) => {\r\n      if (url === this.props.path) {\r\n        this.setState({ pendingApiCall: inProgress });\r\n      }\r\n    };\r\n\r\n    render() {\r\n      const { pendingApiCall } = this.state;\r\n    //   return (\r\n    //     <div>\r\n    //       {React.cloneElement(this.props.children, {\r\n    //         pendingApiCall,\r\n    //       })}\r\n    //     </div>\r\n    //   );\r\n        return <WrappedComponent pendingApiCall={pendingApiCall}/>\r\n\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}