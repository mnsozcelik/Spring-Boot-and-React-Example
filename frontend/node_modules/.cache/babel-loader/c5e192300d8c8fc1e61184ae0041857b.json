{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\ozcelik\\\\Desktop\\\\workspace\\\\frontend\\\\src\\\\shared\\\\ApiProgress.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === apiPath) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.requestInterceptor = axios.interceptors.request.use(request => {\n        this.updateApiCallFor(request.url, true);\n        return request;\n      });\n      this.responseInterceptor = axios.interceptors.response.use(response => {\n        this.updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        this.updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    }\n\n    componentWillUnmount() {\n      axios.interceptors.request.eject(this.requestInterceptor);\n      axios.interceptors.response.eject(this.responseInterceptor);\n    }\n\n    render() {\n      const {\n        pendingApiCall\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(WrappedComponent, { ...this.props,\n        pendingApiCall: pendingApiCall\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    }\n\n  }, _class.displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`, _temp;\n}","map":{"version":3,"sources":["D:/Users/ozcelik/Desktop/workspace/frontend/src/shared/ApiProgress.js"],"names":["React","Component","axios","getDisplayName","WrappedComponent","displayName","name","withApiProgress","apiPath","state","pendingApiCall","updateApiCallFor","url","inProgress","setState","componentDidMount","requestInterceptor","interceptors","request","use","responseInterceptor","response","config","error","componentWillUnmount","eject","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,cAAT,CAAwBC,gBAAxB,EAA0C;AACxC,SAAOA,gBAAgB,CAACC,WAAjB,IAAgCD,gBAAgB,CAACE,IAAjD,IAAyD,WAAhE;AACD;;AAED,OAAO,SAASC,eAAT,CAAyBH,gBAAzB,EAA2CI,OAA3C,EAAoD;AAAA;;AACzD,0BAAO,cAAcP,SAAd,CAAwB;AAAA;AAAA;AAAA,WAG7BQ,KAH6B,GAGrB;AACNC,QAAAA,cAAc,EAAE;AADV,OAHqB;;AAAA,WA6B7BC,gBA7B6B,GA6BV,CAACC,GAAD,EAAMC,UAAN,KAAqB;AACtC,YAAID,GAAG,KAAKJ,OAAZ,EAAqB;AACnB,eAAKM,QAAL,CAAc;AAAEJ,YAAAA,cAAc,EAAEG;AAAlB,WAAd;AACD;AACF,OAjC4B;AAAA;;AAO7BE,IAAAA,iBAAiB,GAAG;AAClB,WAAKC,kBAAL,GAA0Bd,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAa;AACpE,aAAKP,gBAAL,CAAsBO,OAAO,CAACN,GAA9B,EAAmC,IAAnC;AACA,eAAOM,OAAP;AACD,OAHyB,CAA1B;AAIA,WAAKE,mBAAL,GAA2BlB,KAAK,CAACe,YAAN,CAAmBI,QAAnB,CAA4BF,GAA5B,CACxBE,QAAD,IAAc;AACZ,aAAKV,gBAAL,CAAsBU,QAAQ,CAACC,MAAT,CAAgBV,GAAtC,EAA2C,KAA3C;AACA,eAAOS,QAAP;AACD,OAJwB,EAKxBE,KAAD,IAAW;AACT,aAAKZ,gBAAL,CAAsBY,KAAK,CAACD,MAAN,CAAaV,GAAnC,EAAwC,KAAxC;AACA,cAAMW,KAAN;AACD,OARwB,CAA3B;AAUD;;AAEDC,IAAAA,oBAAoB,GAAG;AACrBtB,MAAAA,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiC,KAAKT,kBAAtC;AACAd,MAAAA,KAAK,CAACe,YAAN,CAAmBI,QAAnB,CAA4BI,KAA5B,CAAkC,KAAKL,mBAAvC;AACD;;AAQDM,IAAAA,MAAM,GAAG;AACP,YAAM;AAAEhB,QAAAA;AAAF,UAAqB,KAAKD,KAAhC;AACA,0BACE,QAAC,gBAAD,OAAuB,KAAKkB,KAA5B;AAAmC,QAAA,cAAc,EAAEjB;AAAnD;AAAA;AAAA;AAAA;AAAA,cADF;AAGD;;AAxC4B,GAA/B,SACSL,WADT,GACwB,eAAcF,cAAc,CAACC,gBAAD,CAAmB,GADvE;AA0CD","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction getDisplayName(WrappedComponent) {\r\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\r\n}\r\n\r\nexport function withApiProgress(WrappedComponent, apiPath) {\r\n  return class extends Component {\r\n    static displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`;\r\n\r\n    state = {\r\n      pendingApiCall: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.requestInterceptor = axios.interceptors.request.use((request) => {\r\n        this.updateApiCallFor(request.url, true);\r\n        return request;\r\n      });\r\n      this.responseInterceptor = axios.interceptors.response.use(\r\n        (response) => {\r\n          this.updateApiCallFor(response.config.url, false);\r\n          return response;\r\n        },\r\n        (error) => {\r\n          this.updateApiCallFor(error.config.url, false);\r\n          throw error;\r\n        }\r\n      );\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      axios.interceptors.request.eject(this.requestInterceptor);\r\n      axios.interceptors.response.eject(this.responseInterceptor);\r\n    }\r\n\r\n    updateApiCallFor = (url, inProgress) => {\r\n      if (url === apiPath) {\r\n        this.setState({ pendingApiCall: inProgress });\r\n      }\r\n    };\r\n\r\n    render() {\r\n      const { pendingApiCall } = this.state;\r\n      return (\r\n        <WrappedComponent  {...this.props} pendingApiCall={pendingApiCall} />\r\n      );\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}